/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { IconName, IconPrefix } from '@fortawesome/fontawesome-svg-core';
import { JSX } from '@stencil/core';
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import { P6ButtonType } from './components/atoms/p6-button/p6-button';
import { P6CalendarType } from './components/atoms/p6-calendar/p6-calendar';
import { P6CheckboxValue } from './components/atoms/p6-checkbox/p6-checkbox';
import { P6InputValue } from './components/atoms/p6-input/p6-input';
import { P6InputType } from './components/atoms/p6-input/types';
import { Target } from './components/atoms/p6-link/p6-link';
import { P6RadioValue } from './components/atoms/p6-radio/p6-radio';
import { P6SelectControl, P6SelectValue } from './components/atoms/p6-select-native/p6-select-native';
import { P6SwitchValue } from './components/atoms/p6-switch/p6-switch';
import { P6TextareaValue } from './components/atoms/p6-textarea/p6-textarea';
import { P6LanguageValue } from './components/molecules/p6-language/p6-language';
import { P6TranslationControl, P6TranslationValue } from './components/molecules/p6-translation/p6-translation';
import {
  AlignColumnDetail,
  CellValueChangedDetail,
  Column,
  ColumnDefinition,
  ColumnId,
  DataItem,
  EditingCellDetail,
  FilterRowsDetail,
  MoveColumnDetail,
  ResetDefinitionsDetail,
  ResizeColumnDetail,
  Row,
  RowId,
  ShowColumnDetail,
  ShowOptionsDetail,
  SortColumnDetail,
} from './components/organisms/p6-grid/core/entities';
import { P6Control } from './shared/form/control';
import { InvalidEventDetail, ValidEventDetail } from './shared/form/event';
import { Alignment, Mode, Position, Size, SortOrder } from './shared/types';
import { LanguageCode } from './utils/language';
export namespace Components {
  interface P6Action {
    /**
     * If `true`, the user cannot interact with the Action.
     */
    disabled: boolean;
    /**
     * set the mode of the action
     */
    mode: Mode;
    /**
     * set the size of the action
     */
    size: Size;
    /**
     * If set, shows a waiting/busy indicator
     */
    waiting: boolean;
  }
  interface P6Button {
    /**
     * Disabled - If `true`, the user cannot interact with the button.
     */
    disabled: boolean;
    /**
     * set the mode of the button
     */
    mode: Mode;
    /**
     * Outlined
     */
    outlined: boolean;
    /**
     * set the size of the button
     */
    size: Size;
    /**
     * type of the button.
     */
    type: P6ButtonType;
    /**
     * If set, shows a waiting/busy indicator
     */
    waiting: boolean;
  }
  interface P6Calendar {
    /**
     * The color of the field
     */
    color: Mode;
    /**
     * Disabled - If `true`, the user cannot interact with the field.
     */
    disabled: boolean;
    /**
     * Pre-selected end date
     */
    endDate: string | undefined;
    /**
     * Range capability (start and end date/time selection)
     */
    isRange: boolean;
    /**
     * From label
     */
    labelFrom: string;
    /**
     * To label
     */
    labelTo: string;
    /**
     * Maximum date allowed
     */
    maxDate: string | undefined;
    /**
     * Minimum date allowed
     */
    minDate: string | undefined;
    /**
     * Steps for minutes selector
     */
    minuteSteps: number;
    /**
     * The name
     */
    name: string;
    /**
     * Marks the field as read only
     */
    readOnly: boolean;
    /**
     * Required - If `true`, the user must set a value to be valid
     */
    required: boolean;
    /**
     * Pre-selected start date
     */
    startDate: string | undefined;
    /**
     * Type of field (date, time, datetime)
     */
    type: P6CalendarType;
  }
  interface P6Checkbox {
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     */
    checkValidity: () => Promise<boolean>;
    /**
     * Checked
     */
    checked: boolean;
    /**
     * Disable
     */
    disabled: boolean;
    /**
     * set the mode of the action
     */
    mode: Mode;
    /**
     * Checkbox name
     */
    name: string;
    /**
     * Restores the checkbox's default value
     */
    reset: () => Promise<boolean>;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field".
     */
    validationMessage: () => Promise<string>;
    /**
     * Value
     */
    value: string;
  }
  interface P6Container {}
  interface P6Dropdown {}
  interface P6Empty {}
  interface P6Field {}
  interface P6Form {
    /**
     * Sets or retrieves the name of the object.
     */
    name?: string;
  }
  interface P6Grid {
    /**
     * clone a row
     * @param rowId id of the row to be clone
     */
    cloneRow: (rowId: RowId) => Promise<RowId>;
    /**
     * Display a context menu based on row data
     */
    customContextMenu?: (row: Row<DataItem>) => JSX.Element;
    /**
     * Grid rows
     */
    data: DataItem[];
    /**
     * Grid headers
     */
    definitions: ColumnDefinition<DataItem>[];
    /**
     * Get the columns of the grid
     */
    getColumns: () => Promise<Column<DataItem>[]>;
    /**
     * Display spinner
     */
    loading: boolean;
    /**
     * Select a list of rows
     * @param rowIds ids of the rows to be select
     */
    selectRows: (rowIds: RowId[] | 'all') => Promise<boolean>;
    /**
     * Start editing a cell
     * @param rowId id of the row edited
     * @param columnId id of the row edited
     */
    startEditingCell: (rowId: RowId, columnId: ColumnId) => Promise<void>;
    /**
     * Stop editing a cell
     * @param rowId id of the row edited
     * @param columnId id of the row edited
     */
    stopEditingCell: (rowId: RowId, columnId: ColumnId) => Promise<void>;
  }
  interface P6GridActions {
    /**
     * List of grid columns
     */
    columns: Column<DataItem>[];
    /**
     * Hide grid options
     */
    hideOptions: boolean;
    /**
     * Value used to filter the data
     */
    searchValue: string | undefined;
  }
  interface P6GridBody {}
  interface P6GridCell {
    /**
     * Cell alignment
     */
    align: Alignment;
    /**
     * Cell text color
     */
    color: string | undefined;
    /**
     * Cell column
     */
    column: Column<DataItem>;
    /**
     * Set to true if this cell is editable, otherwise false
     */
    editable: boolean;
    /**
     * Set to true if this cell is being edited
     */
    editing: boolean;
    /**
     * Cell line
     */
    row: Row<DataItem>;
    /**
     * Cell width
     */
    width: number | string;
  }
  interface P6GridHeader {}
  interface P6GridHeaderCell {
    /**
     * the column
     */
    column: Column<DataItem>;
    /**
     * Disabled templating
     */
    disabled: boolean;
    /**
     * Displays the sort order of this column
     */
    sortOrder: SortOrder;
    /**
     * Cell width
     */
    width: number | string;
  }
  interface P6GridHeaderMenu {
    /**
     * Cell alignment
     */
    align: Alignment;
    /**
     * the column
     */
    column: Column<DataItem>;
    /**
     * the sort order of this column
     */
    sortOrder: SortOrder;
  }
  interface P6GridOptions {
    /**
     * List of grid columns
     */
    columns: Column<DataItem>[];
  }
  interface P6GridRow {
    /**
     * Is row selected or not
     */
    selected: boolean;
  }
  interface P6GridTextareaCellEditor {
    /**
     * the cell column
     */
    column: Column<DataItem>;
    /**
     * the cell row
     */
    row: Row<DataItem>;
    /**
     * Current cell value
     */
    value: string;
  }
  interface P6Help {
    /**
     * Tooltip mode
     */
    mode: Mode;
    /**
     * Tooltip position (default position is top)
     */
    position: Position;
    /**
     * Tooltip text
     */
    text: string;
  }
  interface P6Hint {
    /**
     * set the mode of the hint
     */
    mode: Mode;
  }
  interface P6Icon {
    /**
     * Style prefix
     */
    iconPrefix: IconPrefix;
    /**
     * Icon name
     */
    name: IconName;
    /**
     * set the size of the button
     */
    size: Size;
    /**
     * transformation performed on the icon.
     */
    transform: string | undefined;
  }
  interface P6Input {
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     */
    checkValidity: () => Promise<boolean>;
    /**
     * the input is not available for interaction. The value will not be submitted with the form
     */
    disabled: boolean;
    /**
     * The maximum length or value
     */
    max: number | undefined;
    /**
     * The minimum length or value
     */
    min: number | undefined;
    /**
     * The name of the input.
     */
    name: string;
    /**
     * Pattern the value must match to be valid.
     */
    pattern: string | undefined;
    /**
     * content to be appear in the form control when the form control is empty
     */
    placeholder: string;
    /**
     * marks an element that can't be edited.
     */
    readOnly: boolean;
    /**
     * marks an element that can't be submitted without a value.
     */
    required: boolean;
    /**
     * Restores the input's default value
     */
    reset: () => Promise<boolean>;
    /**
     * the content type of the input.
     */
    type: P6InputType;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field".
     */
    validationMessage: () => Promise<string>;
    /**
     * the value of the input.
     */
    value: string | number | undefined;
    /**
     * shows a waiting indicator
     */
    waiting: boolean;
  }
  interface P6Label {}
  interface P6Language {
    /**
     * The select is not available for interaction. The value will not be submitted with the form
     */
    disabled: boolean;
    /**
     * Values to exclude from the language list
     */
    excludes: string[];
    /**
     * The select should take the full width
     */
    fullWidth: boolean;
    /**
     * The Mode of the component to display
     */
    mode: Mode;
    /**
     * The name
     */
    name: string;
    /**
     * Marks as read only.
     */
    readOnly: boolean;
    /**
     * Marks the select as required. It can't be submitted without a value
     */
    required: boolean;
    /**
     * The selected value
     */
    value: P6LanguageValue;
  }
  interface P6Link {
    /**
     * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want). Only applies when an `href` is provided.
     */
    download: string | undefined;
    /**
     * The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers.
     */
    href: string | undefined;
    /**
     * Sets or retrieves the relationship between the object and the destination of the link. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types). Only applies when an `href` is provided.
     */
    rel: string | undefined;
    /**
     * Sets or retrieves the window or frame at which to target content. Only applies when an `href` is provided.
     */
    target: Target | undefined;
  }
  interface P6Panel {
    /**
     * Set the panel hideable
     */
    hideable: boolean;
  }
  interface P6Radio {
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     */
    checkValidity: () => Promise<boolean>;
    /**
     * Initial value
     */
    checked: boolean;
    /**
     * Disable
     */
    disabled: boolean;
    /**
     * Radio name
     */
    name: string;
    /**
     * Readonly
     */
    readOnly: boolean;
    /**
     * Restores the radio's default value
     */
    reset: () => Promise<boolean>;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field".
     */
    validationMessage: () => Promise<string>;
    /**
     * Value
     */
    value: string | number;
  }
  interface P6RadioGroup {}
  interface P6Select {
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     */
    checkValidity: () => Promise<boolean>;
    /**
     * Disable the search on the select
     */
    disableSearch: boolean;
    /**
     * The select is not available for interaction. The value will not be submitted with the form
     */
    disabled: boolean;
    /**
     * Marks the select as multiple
     */
    multiple: boolean;
    /**
     * The name of the select
     */
    name: string;
    /**
     * The value of the placeholder to display on the search
     */
    placeholder: string | undefined;
    /**
     * Marks the select as read only.
     */
    readOnly: boolean;
    /**
     * Marks the select as required. It can't be submitted without a value
     */
    required: boolean;
    /**
     * Sort the options by alphabetic order
     */
    shouldSort: boolean;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field".
     */
    validationMessage: () => Promise<string>;
  }
  interface P6SelectNative {
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     */
    checkValidity: () => Promise<boolean>;
    /**
     * The select is not available for interaction. The value will not be submitted with the form
     */
    disabled: boolean;
    /**
     * The select should take the full width
     */
    fullWidth: boolean;
    /**
     * The Mode of the component to display
     */
    mode: Mode;
    /**
     * Is multiple
     */
    multiple: boolean;
    /**
     * The name
     */
    name: string;
    /**
     * Marks as read only.
     */
    readOnly: boolean;
    /**
     * Marks the select as required. It can't be submitted without a value
     */
    required: boolean;
    /**
     * Restores the input's default value
     */
    reset: () => Promise<boolean>;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field".
     */
    validationMessage: () => Promise<string>;
  }
  interface P6Spinner {}
  interface P6Switch {
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     */
    checkValidity: () => Promise<boolean>;
    /**
     * Initial value
     */
    checked: boolean;
    /**
     * Disable
     */
    disabled: boolean;
    /**
     * Mode
     */
    mode: Mode;
    /**
     * Switch name
     */
    name: string;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field".
     */
    validationMessage: () => Promise<string>;
  }
  interface P6Tabs {
    /**
     * Default tab selected.
     */
    selected: string | undefined;
  }
  interface P6Tag {
    /**
     * Mode
     */
    mode: Mode;
  }
  interface P6Textarea {
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     */
    checkValidity: () => Promise<boolean>;
    /**
     * The number of columns
     */
    cols: number | undefined;
    /**
     * the input is not available for interaction. The value will not be submitted with the form
     */
    disabled: boolean;
    /**
     * The maximum length or value
     */
    max: number | undefined;
    /**
     * The minimum length or value
     */
    min: number | undefined;
    /**
     * The name of the input.
     */
    name: string;
    /**
     * content to be appear in the form control when the form control is empty
     */
    placeholder: string | undefined;
    /**
     * marks an element that can't be edited.
     */
    readOnly: boolean;
    /**
     * marks an element that can't be submitted without a value.
     */
    required: boolean;
    /**
     * Restores the textarea's default value
     */
    reset: () => Promise<boolean>;
    /**
     * The user can resize the field
     */
    resizable: boolean;
    /**
     * The number of rows
     */
    rows: number | undefined;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field".
     */
    validationMessage: () => Promise<string>;
    /**
     * the value of the input.
     */
    value: string | undefined;
    /**
     * shows a waiting indicator
     */
    waiting: boolean;
  }
  interface P6Translation {
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     */
    checkValidity: () => Promise<boolean>;
    /**
     * the input is not available for interaction. The value will not be submitted with the form
     */
    disabled: boolean;
    /**
     * The name
     */
    name: string;
    /**
     * Marks as read only.
     */
    readOnly: boolean;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field".
     */
    validationMessage: () => Promise<string>;
    /**
     * The value
     */
    value: P6TranslationValue;
  }
  interface P6TranslationLine {
    /**
     * Disabled
     */
    disabled: boolean;
    /**
     * The current translation
     */
    excludes: LanguageCode[];
    /**
     * The language
     */
    language: LanguageCode;
    /**
     * The name
     */
    name: string;
    /**
     * Read only
     */
    readOnly: boolean;
    /**
     * The translation
     */
    translation: string;
  }
  interface P6Waiting {}
}
declare global {
  interface HTMLP6ActionElement extends Components.P6Action, HTMLStencilElement {}
  var HTMLP6ActionElement: {
    prototype: HTMLP6ActionElement;
    new (): HTMLP6ActionElement;
  };
  interface HTMLP6ButtonElement extends Components.P6Button, HTMLStencilElement {}
  var HTMLP6ButtonElement: {
    prototype: HTMLP6ButtonElement;
    new (): HTMLP6ButtonElement;
  };
  interface HTMLP6CalendarElement extends Components.P6Calendar, HTMLStencilElement {}
  var HTMLP6CalendarElement: {
    prototype: HTMLP6CalendarElement;
    new (): HTMLP6CalendarElement;
  };
  interface HTMLP6CheckboxElement extends Components.P6Checkbox, HTMLStencilElement {}
  var HTMLP6CheckboxElement: {
    prototype: HTMLP6CheckboxElement;
    new (): HTMLP6CheckboxElement;
  };
  interface HTMLP6ContainerElement extends Components.P6Container, HTMLStencilElement {}
  var HTMLP6ContainerElement: {
    prototype: HTMLP6ContainerElement;
    new (): HTMLP6ContainerElement;
  };
  interface HTMLP6DropdownElement extends Components.P6Dropdown, HTMLStencilElement {}
  var HTMLP6DropdownElement: {
    prototype: HTMLP6DropdownElement;
    new (): HTMLP6DropdownElement;
  };
  interface HTMLP6EmptyElement extends Components.P6Empty, HTMLStencilElement {}
  var HTMLP6EmptyElement: {
    prototype: HTMLP6EmptyElement;
    new (): HTMLP6EmptyElement;
  };
  interface HTMLP6FieldElement extends Components.P6Field, HTMLStencilElement {}
  var HTMLP6FieldElement: {
    prototype: HTMLP6FieldElement;
    new (): HTMLP6FieldElement;
  };
  interface HTMLP6FormElement extends Components.P6Form, HTMLStencilElement {}
  var HTMLP6FormElement: {
    prototype: HTMLP6FormElement;
    new (): HTMLP6FormElement;
  };
  interface HTMLP6GridElement extends Components.P6Grid, HTMLStencilElement {}
  var HTMLP6GridElement: {
    prototype: HTMLP6GridElement;
    new (): HTMLP6GridElement;
  };
  interface HTMLP6GridActionsElement extends Components.P6GridActions, HTMLStencilElement {}
  var HTMLP6GridActionsElement: {
    prototype: HTMLP6GridActionsElement;
    new (): HTMLP6GridActionsElement;
  };
  interface HTMLP6GridBodyElement extends Components.P6GridBody, HTMLStencilElement {}
  var HTMLP6GridBodyElement: {
    prototype: HTMLP6GridBodyElement;
    new (): HTMLP6GridBodyElement;
  };
  interface HTMLP6GridCellElement extends Components.P6GridCell, HTMLStencilElement {}
  var HTMLP6GridCellElement: {
    prototype: HTMLP6GridCellElement;
    new (): HTMLP6GridCellElement;
  };
  interface HTMLP6GridHeaderElement extends Components.P6GridHeader, HTMLStencilElement {}
  var HTMLP6GridHeaderElement: {
    prototype: HTMLP6GridHeaderElement;
    new (): HTMLP6GridHeaderElement;
  };
  interface HTMLP6GridHeaderCellElement extends Components.P6GridHeaderCell, HTMLStencilElement {}
  var HTMLP6GridHeaderCellElement: {
    prototype: HTMLP6GridHeaderCellElement;
    new (): HTMLP6GridHeaderCellElement;
  };
  interface HTMLP6GridHeaderMenuElement extends Components.P6GridHeaderMenu, HTMLStencilElement {}
  var HTMLP6GridHeaderMenuElement: {
    prototype: HTMLP6GridHeaderMenuElement;
    new (): HTMLP6GridHeaderMenuElement;
  };
  interface HTMLP6GridOptionsElement extends Components.P6GridOptions, HTMLStencilElement {}
  var HTMLP6GridOptionsElement: {
    prototype: HTMLP6GridOptionsElement;
    new (): HTMLP6GridOptionsElement;
  };
  interface HTMLP6GridRowElement extends Components.P6GridRow, HTMLStencilElement {}
  var HTMLP6GridRowElement: {
    prototype: HTMLP6GridRowElement;
    new (): HTMLP6GridRowElement;
  };
  interface HTMLP6GridTextareaCellEditorElement extends Components.P6GridTextareaCellEditor, HTMLStencilElement {}
  var HTMLP6GridTextareaCellEditorElement: {
    prototype: HTMLP6GridTextareaCellEditorElement;
    new (): HTMLP6GridTextareaCellEditorElement;
  };
  interface HTMLP6HelpElement extends Components.P6Help, HTMLStencilElement {}
  var HTMLP6HelpElement: {
    prototype: HTMLP6HelpElement;
    new (): HTMLP6HelpElement;
  };
  interface HTMLP6HintElement extends Components.P6Hint, HTMLStencilElement {}
  var HTMLP6HintElement: {
    prototype: HTMLP6HintElement;
    new (): HTMLP6HintElement;
  };
  interface HTMLP6IconElement extends Components.P6Icon, HTMLStencilElement {}
  var HTMLP6IconElement: {
    prototype: HTMLP6IconElement;
    new (): HTMLP6IconElement;
  };
  interface HTMLP6InputElement extends Components.P6Input, HTMLStencilElement {}
  var HTMLP6InputElement: {
    prototype: HTMLP6InputElement;
    new (): HTMLP6InputElement;
  };
  interface HTMLP6LabelElement extends Components.P6Label, HTMLStencilElement {}
  var HTMLP6LabelElement: {
    prototype: HTMLP6LabelElement;
    new (): HTMLP6LabelElement;
  };
  interface HTMLP6LanguageElement extends Components.P6Language, HTMLStencilElement {}
  var HTMLP6LanguageElement: {
    prototype: HTMLP6LanguageElement;
    new (): HTMLP6LanguageElement;
  };
  interface HTMLP6LinkElement extends Components.P6Link, HTMLStencilElement {}
  var HTMLP6LinkElement: {
    prototype: HTMLP6LinkElement;
    new (): HTMLP6LinkElement;
  };
  interface HTMLP6PanelElement extends Components.P6Panel, HTMLStencilElement {}
  var HTMLP6PanelElement: {
    prototype: HTMLP6PanelElement;
    new (): HTMLP6PanelElement;
  };
  interface HTMLP6RadioElement extends Components.P6Radio, HTMLStencilElement {}
  var HTMLP6RadioElement: {
    prototype: HTMLP6RadioElement;
    new (): HTMLP6RadioElement;
  };
  interface HTMLP6RadioGroupElement extends Components.P6RadioGroup, HTMLStencilElement {}
  var HTMLP6RadioGroupElement: {
    prototype: HTMLP6RadioGroupElement;
    new (): HTMLP6RadioGroupElement;
  };
  interface HTMLP6SelectElement extends Components.P6Select, HTMLStencilElement {}
  var HTMLP6SelectElement: {
    prototype: HTMLP6SelectElement;
    new (): HTMLP6SelectElement;
  };
  interface HTMLP6SelectNativeElement extends Components.P6SelectNative, HTMLStencilElement {}
  var HTMLP6SelectNativeElement: {
    prototype: HTMLP6SelectNativeElement;
    new (): HTMLP6SelectNativeElement;
  };
  interface HTMLP6SpinnerElement extends Components.P6Spinner, HTMLStencilElement {}
  var HTMLP6SpinnerElement: {
    prototype: HTMLP6SpinnerElement;
    new (): HTMLP6SpinnerElement;
  };
  interface HTMLP6SwitchElement extends Components.P6Switch, HTMLStencilElement {}
  var HTMLP6SwitchElement: {
    prototype: HTMLP6SwitchElement;
    new (): HTMLP6SwitchElement;
  };
  interface HTMLP6TabsElement extends Components.P6Tabs, HTMLStencilElement {}
  var HTMLP6TabsElement: {
    prototype: HTMLP6TabsElement;
    new (): HTMLP6TabsElement;
  };
  interface HTMLP6TagElement extends Components.P6Tag, HTMLStencilElement {}
  var HTMLP6TagElement: {
    prototype: HTMLP6TagElement;
    new (): HTMLP6TagElement;
  };
  interface HTMLP6TextareaElement extends Components.P6Textarea, HTMLStencilElement {}
  var HTMLP6TextareaElement: {
    prototype: HTMLP6TextareaElement;
    new (): HTMLP6TextareaElement;
  };
  interface HTMLP6TranslationElement extends Components.P6Translation, HTMLStencilElement {}
  var HTMLP6TranslationElement: {
    prototype: HTMLP6TranslationElement;
    new (): HTMLP6TranslationElement;
  };
  interface HTMLP6TranslationLineElement extends Components.P6TranslationLine, HTMLStencilElement {}
  var HTMLP6TranslationLineElement: {
    prototype: HTMLP6TranslationLineElement;
    new (): HTMLP6TranslationLineElement;
  };
  interface HTMLP6WaitingElement extends Components.P6Waiting, HTMLStencilElement {}
  var HTMLP6WaitingElement: {
    prototype: HTMLP6WaitingElement;
    new (): HTMLP6WaitingElement;
  };
  interface HTMLElementTagNameMap {
    'p6-action': HTMLP6ActionElement;
    'p6-button': HTMLP6ButtonElement;
    'p6-calendar': HTMLP6CalendarElement;
    'p6-checkbox': HTMLP6CheckboxElement;
    'p6-container': HTMLP6ContainerElement;
    'p6-dropdown': HTMLP6DropdownElement;
    'p6-empty': HTMLP6EmptyElement;
    'p6-field': HTMLP6FieldElement;
    'p6-form': HTMLP6FormElement;
    'p6-grid': HTMLP6GridElement;
    'p6-grid-actions': HTMLP6GridActionsElement;
    'p6-grid-body': HTMLP6GridBodyElement;
    'p6-grid-cell': HTMLP6GridCellElement;
    'p6-grid-header': HTMLP6GridHeaderElement;
    'p6-grid-header-cell': HTMLP6GridHeaderCellElement;
    'p6-grid-header-menu': HTMLP6GridHeaderMenuElement;
    'p6-grid-options': HTMLP6GridOptionsElement;
    'p6-grid-row': HTMLP6GridRowElement;
    'p6-grid-textarea-cell-editor': HTMLP6GridTextareaCellEditorElement;
    'p6-help': HTMLP6HelpElement;
    'p6-hint': HTMLP6HintElement;
    'p6-icon': HTMLP6IconElement;
    'p6-input': HTMLP6InputElement;
    'p6-label': HTMLP6LabelElement;
    'p6-language': HTMLP6LanguageElement;
    'p6-link': HTMLP6LinkElement;
    'p6-panel': HTMLP6PanelElement;
    'p6-radio': HTMLP6RadioElement;
    'p6-radio-group': HTMLP6RadioGroupElement;
    'p6-select': HTMLP6SelectElement;
    'p6-select-native': HTMLP6SelectNativeElement;
    'p6-spinner': HTMLP6SpinnerElement;
    'p6-switch': HTMLP6SwitchElement;
    'p6-tabs': HTMLP6TabsElement;
    'p6-tag': HTMLP6TagElement;
    'p6-textarea': HTMLP6TextareaElement;
    'p6-translation': HTMLP6TranslationElement;
    'p6-translation-line': HTMLP6TranslationLineElement;
    'p6-waiting': HTMLP6WaitingElement;
  }
}
declare namespace LocalJSX {
  interface P6Action {
    /**
     * If `true`, the user cannot interact with the Action.
     */
    disabled?: boolean;
    /**
     * set the mode of the action
     */
    mode?: Mode;
    /**
     * set the size of the action
     */
    size?: Size;
    /**
     * If set, shows a waiting/busy indicator
     */
    waiting?: boolean;
  }
  interface P6Button {
    /**
     * Disabled - If `true`, the user cannot interact with the button.
     */
    disabled?: boolean;
    /**
     * set the mode of the button
     */
    mode?: Mode;
    /**
     * Outlined
     */
    outlined?: boolean;
    /**
     * set the size of the button
     */
    size?: Size;
    /**
     * type of the button.
     */
    type?: P6ButtonType;
    /**
     * If set, shows a waiting/busy indicator
     */
    waiting?: boolean;
  }
  interface P6Calendar {
    /**
     * The color of the field
     */
    color?: Mode;
    /**
     * Disabled - If `true`, the user cannot interact with the field.
     */
    disabled?: boolean;
    /**
     * Pre-selected end date
     */
    endDate?: string | undefined;
    /**
     * Range capability (start and end date/time selection)
     */
    isRange?: boolean;
    /**
     * From label
     */
    labelFrom?: string;
    /**
     * To label
     */
    labelTo?: string;
    /**
     * Maximum date allowed
     */
    maxDate?: string | undefined;
    /**
     * Minimum date allowed
     */
    minDate?: string | undefined;
    /**
     * Steps for minutes selector
     */
    minuteSteps?: number;
    /**
     * The name
     */
    name: string;
    /**
     * Marks the field as read only
     */
    readOnly?: boolean;
    /**
     * Required - If `true`, the user must set a value to be valid
     */
    required?: boolean;
    /**
     * Pre-selected start date
     */
    startDate?: string | undefined;
    /**
     * Type of field (date, time, datetime)
     */
    type?: P6CalendarType;
  }
  interface P6Checkbox {
    /**
     * Checked
     */
    checked?: boolean;
    /**
     * Disable
     */
    disabled?: boolean;
    /**
     * set the mode of the action
     */
    mode?: Mode;
    /**
     * Checkbox name
     */
    name: string;
    /**
     * Registering the field in a p6-form
     */
    onP6FormRegister?: (event: CustomEvent<P6Control<P6CheckboxValue>>) => void;
    /**
     * Unregistering the field in a p6-form
     */
    onP6FormUnregister?: (event: CustomEvent<P6Control<P6CheckboxValue>>) => void;
    /**
     * Fires when the field has been checked for validity and doesn't satisfy its constraints
     */
    onP6Invalid?: (event: CustomEvent<InvalidEventDetail>) => void;
    /**
     * Fires when the field has been checked for validity and satisfy its constraints
     */
    onP6Valid?: (event: CustomEvent<ValidEventDetail<P6CheckboxValue>>) => void;
    /**
     * Value
     */
    value?: string;
  }
  interface P6Container {}
  interface P6Dropdown {}
  interface P6Empty {}
  interface P6Field {}
  interface P6Form {
    /**
     * Sets or retrieves the name of the object.
     */
    name?: string;
    /**
     * Fires when a FORM submitted is valid.
     */
    onP6Submit?: (event: CustomEvent<Map<string, unknown>>) => void;
  }
  interface P6Grid {
    /**
     * Display a context menu based on row data
     */
    customContextMenu?: (row: Row<DataItem>) => JSX.Element;
    /**
     * Grid rows
     */
    data: DataItem[];
    /**
     * Grid headers
     */
    definitions: ColumnDefinition<DataItem>[];
    /**
     * Display spinner
     */
    loading?: boolean;
    /**
     * Listen to change event to get updated p6-grid data
     */
    onP6GridConfigurationChange?: (
      event: CustomEvent<{
        columns: Column<DataItem>[];
      }>,
    ) => void;
    /**
     * Listen to change event to get updated p6-grid data
     */
    onP6GridRowDataChange?: (event: CustomEvent<{ row: DataItem[] }>) => void;
  }
  interface P6GridActions {
    /**
     * List of grid columns
     */
    columns: Column<DataItem>[];
    /**
     * Hide grid options
     */
    hideOptions?: boolean;
    /**
     * Update the data filter
     */
    onP6FilterRows?: (event: CustomEvent<FilterRowsDetail>) => void;
    /**
     * Reset the grid configuration
     */
    onP6ResetCustomDefinitions?: (event: CustomEvent<ResetDefinitionsDetail>) => void;
    /**
     * Show or hide the grid options
     */
    onP6ShowOptions?: (event: CustomEvent<ShowOptionsDetail>) => void;
    /**
     * Value used to filter the data
     */
    searchValue?: string | undefined;
  }
  interface P6GridBody {}
  interface P6GridCell {
    /**
     * Cell alignment
     */
    align?: Alignment;
    /**
     * Cell text color
     */
    color?: string | undefined;
    /**
     * Cell column
     */
    column: Column<DataItem>;
    /**
     * Set to true if this cell is editable, otherwise false
     */
    editable?: boolean;
    /**
     * Set to true if this cell is being edited
     */
    editing?: boolean;
    /**
     * Cell line
     */
    row: Row<DataItem>;
    /**
     * Cell width
     */
    width?: number | string;
  }
  interface P6GridHeader {}
  interface P6GridHeaderCell {
    /**
     * the column
     */
    column: Column<DataItem>;
    /**
     * Disabled templating
     */
    disabled?: boolean;
    /**
     * Displays the sort order of this column
     */
    sortOrder?: SortOrder;
    /**
     * Cell width
     */
    width?: number | string;
  }
  interface P6GridHeaderMenu {
    /**
     * Cell alignment
     */
    align: Alignment;
    /**
     * the column
     */
    column: Column<DataItem>;
    /**
     * Update the alignement of the column
     */
    onP6AlignColumn?: (event: CustomEvent<AlignColumnDetail<DataItem>>) => void;
    /**
     * Move the column to the left or to the right
     */
    onP6MoveColumn?: (event: CustomEvent<MoveColumnDetail<DataItem>>) => void;
    /**
     * Resize the column
     */
    onP6ResizeColumn?: (event: CustomEvent<ResizeColumnDetail<DataItem>>) => void;
    /**
     * Update the visibility of the column
     */
    onP6ShowColumn?: (event: CustomEvent<ShowColumnDetail<DataItem>>) => void;
    /**
     * Sort the column
     */
    onP6SortColumn?: (event: CustomEvent<SortColumnDetail<DataItem>>) => void;
    /**
     * the sort order of this column
     */
    sortOrder: SortOrder;
  }
  interface P6GridOptions {
    /**
     * List of grid columns
     */
    columns: Column<DataItem>[];
    /**
     * Update the visibility of the column
     */
    onP6ShowColumn?: (event: CustomEvent<ShowColumnDetail<DataItem>>) => void;
  }
  interface P6GridRow {
    /**
     * Is row selected or not
     */
    selected?: boolean;
  }
  interface P6GridTextareaCellEditor {
    /**
     * the cell column
     */
    column: Column<DataItem>;
    /**
     * the cell value changed
     */
    onP6GridCellValueChanged?: (event: CustomEvent<CellValueChangedDetail<DataItem>>) => void;
    /**
     * the editing status of this cell changed
     */
    onP6GridEditingCell?: (event: CustomEvent<EditingCellDetail<DataItem>>) => void;
    /**
     * the cell row
     */
    row: Row<DataItem>;
    /**
     * Current cell value
     */
    value: string;
  }
  interface P6Help {
    /**
     * Tooltip mode
     */
    mode?: Mode;
    /**
     * Tooltip position (default position is top)
     */
    position?: Position;
    /**
     * Tooltip text
     */
    text: string;
  }
  interface P6Hint {
    /**
     * set the mode of the hint
     */
    mode?: Mode;
  }
  interface P6Icon {
    /**
     * Style prefix
     */
    iconPrefix?: IconPrefix;
    /**
     * Icon name
     */
    name: IconName;
    /**
     * set the size of the button
     */
    size?: Size;
    /**
     * transformation performed on the icon.
     */
    transform?: string | undefined;
  }
  interface P6Input {
    /**
     * the input is not available for interaction. The value will not be submitted with the form
     */
    disabled?: boolean;
    /**
     * The maximum length or value
     */
    max?: number | undefined;
    /**
     * The minimum length or value
     */
    min?: number | undefined;
    /**
     * The name of the input.
     */
    name: string;
    /**
     * Registering the field in a p6-form
     */
    onP6FormRegister?: (event: CustomEvent<P6Control<P6InputValue>>) => void;
    /**
     * Unregistering the field in a p6-form
     */
    onP6FormUnregister?: (event: CustomEvent<P6Control<P6InputValue>>) => void;
    /**
     * Fires when the field has been checked for validity and doesn't satisfy its constraints
     */
    onP6Invalid?: (event: CustomEvent<InvalidEventDetail>) => void;
    /**
     * Fires when the field has been checked for validity and satisfy its constraints
     */
    onP6Valid?: (event: CustomEvent<ValidEventDetail<P6InputValue>>) => void;
    /**
     * Pattern the value must match to be valid.
     */
    pattern?: string | undefined;
    /**
     * content to be appear in the form control when the form control is empty
     */
    placeholder?: string;
    /**
     * marks an element that can't be edited.
     */
    readOnly?: boolean;
    /**
     * marks an element that can't be submitted without a value.
     */
    required?: boolean;
    /**
     * the content type of the input.
     */
    type?: P6InputType;
    /**
     * the value of the input.
     */
    value?: string | number | undefined;
    /**
     * shows a waiting indicator
     */
    waiting?: boolean;
  }
  interface P6Label {}
  interface P6Language {
    /**
     * The select is not available for interaction. The value will not be submitted with the form
     */
    disabled?: boolean;
    /**
     * Values to exclude from the language list
     */
    excludes?: string[];
    /**
     * The select should take the full width
     */
    fullWidth?: boolean;
    /**
     * The Mode of the component to display
     */
    mode?: Mode;
    /**
     * The name
     */
    name: string;
    /**
     * Marks as read only.
     */
    readOnly?: boolean;
    /**
     * Marks the select as required. It can't be submitted without a value
     */
    required?: boolean;
    /**
     * The selected value
     */
    value?: P6LanguageValue;
  }
  interface P6Link {
    /**
     * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want). Only applies when an `href` is provided.
     */
    download?: string | undefined;
    /**
     * The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers.
     */
    href?: string | undefined;
    /**
     * Sets or retrieves the relationship between the object and the destination of the link. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types). Only applies when an `href` is provided.
     */
    rel?: string | undefined;
    /**
     * Sets or retrieves the window or frame at which to target content. Only applies when an `href` is provided.
     */
    target?: Target | undefined;
  }
  interface P6Panel {
    /**
     * Set the panel hideable
     */
    hideable?: boolean;
  }
  interface P6Radio {
    /**
     * Initial value
     */
    checked?: boolean;
    /**
     * Disable
     */
    disabled?: boolean;
    /**
     * Radio name
     */
    name: string;
    /**
     * Registering the field in a p6-form
     */
    onP6FormRegister?: (event: CustomEvent<P6Control<P6RadioValue>>) => void;
    /**
     * Unregistering the field in a p6-form
     */
    onP6FormUnregister?: (event: CustomEvent<P6Control<P6RadioValue>>) => void;
    /**
     * Fires when the field has been checked for validity and doesn't satisfy its constraints
     */
    onP6Invalid?: (event: CustomEvent<InvalidEventDetail>) => void;
    /**
     * Fires when the field has been checked for validity and satisfy its constraints
     */
    onP6Valid?: (event: CustomEvent<ValidEventDetail<P6RadioValue>>) => void;
    /**
     * Readonly
     */
    readOnly?: boolean;
    /**
     * Value
     */
    value: string | number;
  }
  interface P6RadioGroup {}
  interface P6Select {
    /**
     * Disable the search on the select
     */
    disableSearch?: boolean;
    /**
     * The select is not available for interaction. The value will not be submitted with the form
     */
    disabled?: boolean;
    /**
     * Marks the select as multiple
     */
    multiple?: boolean;
    /**
     * The name of the select
     */
    name: string;
    /**
     * The value of the placeholder to display on the search
     */
    placeholder?: string | undefined;
    /**
     * Marks the select as read only.
     */
    readOnly?: boolean;
    /**
     * Marks the select as required. It can't be submitted without a value
     */
    required?: boolean;
    /**
     * Sort the options by alphabetic order
     */
    shouldSort?: boolean;
  }
  interface P6SelectNative {
    /**
     * The select is not available for interaction. The value will not be submitted with the form
     */
    disabled?: boolean;
    /**
     * The select should take the full width
     */
    fullWidth?: boolean;
    /**
     * The Mode of the component to display
     */
    mode?: Mode;
    /**
     * Is multiple
     */
    multiple?: boolean;
    /**
     * The name
     */
    name: string;
    /**
     * When the value change
     */
    onP6Change?: (event: CustomEvent<ValidEventDetail<P6SelectValue>>) => void;
    /**
     * When the select ask to register
     */
    onP6FormRegister?: (event: CustomEvent<P6SelectControl>) => void;
    /**
     * When the select ask to unregister
     */
    onP6FormUnregister?: (event: CustomEvent<P6SelectControl>) => void;
    /**
     * When the select is invalid
     */
    onP6Invalid?: (event: CustomEvent<InvalidEventDetail>) => void;
    /**
     * When the select is valid
     */
    onP6Valid?: (event: CustomEvent<ValidEventDetail<P6SelectValue>>) => void;
    /**
     * Marks as read only.
     */
    readOnly?: boolean;
    /**
     * Marks the select as required. It can't be submitted without a value
     */
    required?: boolean;
  }
  interface P6Spinner {}
  interface P6Switch {
    /**
     * Initial value
     */
    checked?: boolean;
    /**
     * Disable
     */
    disabled?: boolean;
    /**
     * Mode
     */
    mode?: Mode;
    /**
     * Switch name
     */
    name: string;
    /**
     * Registering the field in a p6-form
     */
    onP6FormRegister?: (event: CustomEvent<P6Control<P6SwitchValue>>) => void;
    /**
     * Unregistering the field in a p6-form
     */
    onP6FormUnregister?: (event: CustomEvent<P6Control<P6SwitchValue>>) => void;
    /**
     * Fires when the field has been checked for validity and doesn't satisfy its constraints
     */
    onP6Invalid?: (event: CustomEvent<InvalidEventDetail>) => void;
    /**
     * Fires when the field has been checked for validity and satisfy its constraints
     */
    onP6Valid?: (event: CustomEvent<ValidEventDetail<P6SwitchValue>>) => void;
  }
  interface P6Tabs {
    /**
     * Close tab event
     */
    onP6CloseTab?: (
      event: CustomEvent<{
        tabId: string;
      }>,
    ) => void;
    /**
     * Default tab selected.
     */
    selected?: string | undefined;
  }
  interface P6Tag {
    /**
     * Mode
     */
    mode?: Mode;
  }
  interface P6Textarea {
    /**
     * The number of columns
     */
    cols?: number | undefined;
    /**
     * the input is not available for interaction. The value will not be submitted with the form
     */
    disabled?: boolean;
    /**
     * The maximum length or value
     */
    max?: number | undefined;
    /**
     * The minimum length or value
     */
    min?: number | undefined;
    /**
     * The name of the input.
     */
    name: string;
    /**
     * Registering the field in a p6-form
     */
    onP6FormRegister?: (event: CustomEvent<P6Control<P6TextareaValue>>) => void;
    /**
     * Unregistering the field in a p6-form
     */
    onP6FormUnregister?: (event: CustomEvent<P6Control<P6TextareaValue>>) => void;
    /**
     * Fires when the field has been checked for validity and doesn't satisfy its constraints
     */
    onP6Invalid?: (event: CustomEvent<InvalidEventDetail>) => void;
    /**
     * Fires when the field has been checked for validity and satisfy its constraints
     */
    onP6Valid?: (event: CustomEvent<ValidEventDetail<P6TextareaValue>>) => void;
    /**
     * content to be appear in the form control when the form control is empty
     */
    placeholder?: string | undefined;
    /**
     * marks an element that can't be edited.
     */
    readOnly?: boolean;
    /**
     * marks an element that can't be submitted without a value.
     */
    required?: boolean;
    /**
     * The user can resize the field
     */
    resizable?: boolean;
    /**
     * The number of rows
     */
    rows?: number | undefined;
    /**
     * the value of the input.
     */
    value?: string | undefined;
    /**
     * shows a waiting indicator
     */
    waiting?: boolean;
  }
  interface P6Translation {
    /**
     * the input is not available for interaction. The value will not be submitted with the form
     */
    disabled?: boolean;
    /**
     * The name
     */
    name: string;
    /**
     * When the select ask to register
     */
    onP6FormRegister?: (event: CustomEvent<P6TranslationControl>) => void;
    /**
     * When the select ask to unregister
     */
    onP6FormUnregister?: (event: CustomEvent<P6TranslationControl>) => void;
    /**
     * When the field is invalid
     */
    onP6Invalid?: (event: CustomEvent<InvalidEventDetail>) => void;
    /**
     * When the field is valid
     */
    onP6Valid?: (event: CustomEvent<ValidEventDetail<P6TranslationValue>>) => void;
    /**
     * Marks as read only.
     */
    readOnly?: boolean;
    /**
     * The value
     */
    value?: P6TranslationValue;
  }
  interface P6TranslationLine {
    /**
     * Disabled
     */
    disabled: boolean;
    /**
     * The current translation
     */
    excludes?: LanguageCode[];
    /**
     * The language
     */
    language: LanguageCode;
    /**
     * The name
     */
    name: string;
    onP6Delete?: (event: CustomEvent<void>) => void;
    onP6KeyChange?: (event: CustomEvent<ValidEventDetail<LanguageCode>>) => void;
    onP6ValueChange?: (event: CustomEvent<ValidEventDetail<string>>) => void;
    /**
     * Read only
     */
    readOnly: boolean;
    /**
     * The translation
     */
    translation: string;
  }
  interface P6Waiting {}
  interface IntrinsicElements {
    'p6-action': P6Action;
    'p6-button': P6Button;
    'p6-calendar': P6Calendar;
    'p6-checkbox': P6Checkbox;
    'p6-container': P6Container;
    'p6-dropdown': P6Dropdown;
    'p6-empty': P6Empty;
    'p6-field': P6Field;
    'p6-form': P6Form;
    'p6-grid': P6Grid;
    'p6-grid-actions': P6GridActions;
    'p6-grid-body': P6GridBody;
    'p6-grid-cell': P6GridCell;
    'p6-grid-header': P6GridHeader;
    'p6-grid-header-cell': P6GridHeaderCell;
    'p6-grid-header-menu': P6GridHeaderMenu;
    'p6-grid-options': P6GridOptions;
    'p6-grid-row': P6GridRow;
    'p6-grid-textarea-cell-editor': P6GridTextareaCellEditor;
    'p6-help': P6Help;
    'p6-hint': P6Hint;
    'p6-icon': P6Icon;
    'p6-input': P6Input;
    'p6-label': P6Label;
    'p6-language': P6Language;
    'p6-link': P6Link;
    'p6-panel': P6Panel;
    'p6-radio': P6Radio;
    'p6-radio-group': P6RadioGroup;
    'p6-select': P6Select;
    'p6-select-native': P6SelectNative;
    'p6-spinner': P6Spinner;
    'p6-switch': P6Switch;
    'p6-tabs': P6Tabs;
    'p6-tag': P6Tag;
    'p6-textarea': P6Textarea;
    'p6-translation': P6Translation;
    'p6-translation-line': P6TranslationLine;
    'p6-waiting': P6Waiting;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'p6-action': LocalJSX.P6Action & JSXBase.HTMLAttributes<HTMLP6ActionElement>;
      'p6-button': LocalJSX.P6Button & JSXBase.HTMLAttributes<HTMLP6ButtonElement>;
      'p6-calendar': LocalJSX.P6Calendar & JSXBase.HTMLAttributes<HTMLP6CalendarElement>;
      'p6-checkbox': LocalJSX.P6Checkbox & JSXBase.HTMLAttributes<HTMLP6CheckboxElement>;
      'p6-container': LocalJSX.P6Container & JSXBase.HTMLAttributes<HTMLP6ContainerElement>;
      'p6-dropdown': LocalJSX.P6Dropdown & JSXBase.HTMLAttributes<HTMLP6DropdownElement>;
      'p6-empty': LocalJSX.P6Empty & JSXBase.HTMLAttributes<HTMLP6EmptyElement>;
      'p6-field': LocalJSX.P6Field & JSXBase.HTMLAttributes<HTMLP6FieldElement>;
      'p6-form': LocalJSX.P6Form & JSXBase.HTMLAttributes<HTMLP6FormElement>;
      'p6-grid': LocalJSX.P6Grid & JSXBase.HTMLAttributes<HTMLP6GridElement>;
      'p6-grid-actions': LocalJSX.P6GridActions & JSXBase.HTMLAttributes<HTMLP6GridActionsElement>;
      'p6-grid-body': LocalJSX.P6GridBody & JSXBase.HTMLAttributes<HTMLP6GridBodyElement>;
      'p6-grid-cell': LocalJSX.P6GridCell & JSXBase.HTMLAttributes<HTMLP6GridCellElement>;
      'p6-grid-header': LocalJSX.P6GridHeader & JSXBase.HTMLAttributes<HTMLP6GridHeaderElement>;
      'p6-grid-header-cell': LocalJSX.P6GridHeaderCell & JSXBase.HTMLAttributes<HTMLP6GridHeaderCellElement>;
      'p6-grid-header-menu': LocalJSX.P6GridHeaderMenu & JSXBase.HTMLAttributes<HTMLP6GridHeaderMenuElement>;
      'p6-grid-options': LocalJSX.P6GridOptions & JSXBase.HTMLAttributes<HTMLP6GridOptionsElement>;
      'p6-grid-row': LocalJSX.P6GridRow & JSXBase.HTMLAttributes<HTMLP6GridRowElement>;
      'p6-grid-textarea-cell-editor': LocalJSX.P6GridTextareaCellEditor & JSXBase.HTMLAttributes<HTMLP6GridTextareaCellEditorElement>;
      'p6-help': LocalJSX.P6Help & JSXBase.HTMLAttributes<HTMLP6HelpElement>;
      'p6-hint': LocalJSX.P6Hint & JSXBase.HTMLAttributes<HTMLP6HintElement>;
      'p6-icon': LocalJSX.P6Icon & JSXBase.HTMLAttributes<HTMLP6IconElement>;
      'p6-input': LocalJSX.P6Input & JSXBase.HTMLAttributes<HTMLP6InputElement>;
      'p6-label': LocalJSX.P6Label & JSXBase.HTMLAttributes<HTMLP6LabelElement>;
      'p6-language': LocalJSX.P6Language & JSXBase.HTMLAttributes<HTMLP6LanguageElement>;
      'p6-link': LocalJSX.P6Link & JSXBase.HTMLAttributes<HTMLP6LinkElement>;
      'p6-panel': LocalJSX.P6Panel & JSXBase.HTMLAttributes<HTMLP6PanelElement>;
      'p6-radio': LocalJSX.P6Radio & JSXBase.HTMLAttributes<HTMLP6RadioElement>;
      'p6-radio-group': LocalJSX.P6RadioGroup & JSXBase.HTMLAttributes<HTMLP6RadioGroupElement>;
      'p6-select': LocalJSX.P6Select & JSXBase.HTMLAttributes<HTMLP6SelectElement>;
      'p6-select-native': LocalJSX.P6SelectNative & JSXBase.HTMLAttributes<HTMLP6SelectNativeElement>;
      'p6-spinner': LocalJSX.P6Spinner & JSXBase.HTMLAttributes<HTMLP6SpinnerElement>;
      'p6-switch': LocalJSX.P6Switch & JSXBase.HTMLAttributes<HTMLP6SwitchElement>;
      'p6-tabs': LocalJSX.P6Tabs & JSXBase.HTMLAttributes<HTMLP6TabsElement>;
      'p6-tag': LocalJSX.P6Tag & JSXBase.HTMLAttributes<HTMLP6TagElement>;
      'p6-textarea': LocalJSX.P6Textarea & JSXBase.HTMLAttributes<HTMLP6TextareaElement>;
      'p6-translation': LocalJSX.P6Translation & JSXBase.HTMLAttributes<HTMLP6TranslationElement>;
      'p6-translation-line': LocalJSX.P6TranslationLine & JSXBase.HTMLAttributes<HTMLP6TranslationLineElement>;
      'p6-waiting': LocalJSX.P6Waiting & JSXBase.HTMLAttributes<HTMLP6WaitingElement>;
    }
  }
}
