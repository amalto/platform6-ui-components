//@import "src/global/_variable";
//@import "src/global/_colors";
//@import "src/global/_functions";
//@import "src/global/_control";

$button-color: $text-strong !default;
$button-background-color: $scheme-main !default;
$button-family: false !default;

$button-border-color: $border !default;
$button-border-width: $control-border-width !default;

$button-padding-vertical: calc(0.5em - #{$button-border-width}) !default;
$button-padding-horizontal: 1em !default;

$button-hover-color: $link-hover !default;
$button-hover-border-color: $link-hover-border !default;

$button-focus-color: $link-focus !default;
$button-focus-border-color: $link-focus-border !default;
$button-focus-box-shadow-size: 0 0 0 0.125em !default;
$button-focus-box-shadow-color: bulmaRgba($link, 0.25) !default;

$button-active-color: $link-active !default;
$button-active-border-color: $link-active-border !default;

$button-text-color: $text !default;
$button-text-decoration: underline !default;
$button-text-hover-background-color: $background !default;
$button-text-hover-color: $text-strong !default;

$button-disabled-background-color: $scheme-main !default;
$button-disabled-border-color: $border !default;
$button-disabled-shadow: none !default;
$button-disabled-opacity: 0.5 !default;

$button-static-color: $text-light !default;
$button-static-background-color: $scheme-main-ter !default;
$button-static-border-color: $border !default;

@import 'src/styles/atoms/control';
@import 'src/styles/atoms/button';

:host {
  display: inline-flex;
  .button {
    @include control;
    @include unselectable;

    background-color: $button-background-color;
    border-color: $button-border-color;
    border-width: $button-border-width;
    color: $button-color;
    cursor: pointer;
    @if $button-family {
      font-family: $button-family;
    }

    justify-content: center;
    padding: $button-padding-vertical $button-padding-horizontal;
    text-align: center;
    white-space: nowrap;

    strong {
      color: inherit;
    }

    ::slotted(.icon:first-child:not(:last-child)),
    ::slotted(p6-icon:first-child:not(:last-child)) {
      margin-left: calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width});
      margin-right: $button-padding-horizontal / 4;
    }

    ::slotted(.icon:last-child:not(:first-child)),
    ::slotted(p6-icon:last-child:not(:first-child)) {
      margin-left: $button-padding-horizontal / 4;
      margin-right: calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width});
    }

    ::slotted(.icon:first-child:last-child),
    ::slotted(p6-icon:first-child:last-child) {
      $margin: calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width});

      margin-left: $margin;
      margin-right: $margin;
    }

    // States
    &:hover,
    &.is-hovered {
      border-color: $button-hover-border-color;
      color: $button-hover-color;
    }

    &:active,
    &.is-active {
      border-color: $button-active-border-color;
      color: $button-active-color;
    }

    &:focus,
    &.is-focused {
      border-color: $button-focus-border-color;
      color: $button-focus-color;
    }

    fieldset[disabled] & {
      background-color: $button-disabled-background-color;
      border-color: $button-disabled-border-color;
      box-shadow: $button-disabled-shadow;
      opacity: $button-disabled-opacity;
    }

    &:focus:not(:active),
    &.is-focused:not(:active) {
      box-shadow: $button-focus-box-shadow-size $button-focus-box-shadow-color;
    }

    // Colors
    &.is-text {
      background-color: transparent;
      border-color: transparent;
      color: $button-text-color;
      text-decoration: $button-text-decoration;

      &:hover,
      &.is-hovered,
      &:focus,
      &.is-focused {
        background-color: $button-text-hover-background-color;
        color: $button-text-hover-color;
      }

      &:active,
      &.is-active {
        background-color: bulmaDarken($button-text-hover-background-color, 5%);
        color: $button-text-hover-color;
      }

      &[disabled],
      fieldset[disabled] & {
        background-color: transparent;
        border-color: transparent;
        box-shadow: none;
      }
    }

    @each $name, $pair in $colors {
      $color: nth($pair, 1);
      $color-invert: nth($pair, 2);
      &.is-#{$name} {
        background-color: $color;
        border-color: transparent;
        color: $color-invert;

        &:hover,
        &.is-hovered {
          background-color: bulmaDarken($color, 2.5%);
          border-color: transparent;
          color: $color-invert;
        }

        &:focus,
        &.is-focused {
          border-color: transparent;
          color: $color-invert;

          &:not(:active) {
            box-shadow: $button-focus-box-shadow-size bulmaRgba($color, 0.25);
          }
        }

        &:active,
        &.is-active {
          background-color: bulmaDarken($color, 5%);
          border-color: transparent;
          color: $color-invert;
        }

        &[disabled],
        fieldset[disabled] & {
          background-color: $color;
          border-color: transparent;
          box-shadow: none;
        }

        &.is-inverted {
          background-color: $color-invert;
          color: $color;

          &:hover,
          &.is-hovered {
            background-color: bulmaDarken($color-invert, 5%);
          }

          &[disabled],
          fieldset[disabled] & {
            background-color: $color-invert;
            border-color: transparent;
            box-shadow: none;
            color: $color;
          }
        }

        &.is-loading {
          &::after {
            border-color: transparent transparent $color-invert $color-invert !important;
          }
        }

        &.is-outlined {
          background-color: transparent;
          border-color: $color;
          color: $color;

          &:hover,
          &.is-hovered,
          &:focus,
          &.is-focused {
            background-color: $color;
            border-color: $color;
            color: $color-invert;
          }

          &.is-loading {
            &::after {
              border-color: transparent transparent $color $color !important;
            }

            &:hover,
            &.is-hovered,
            &:focus,
            &.is-focused {
              &::after {
                border-color: transparent transparent $color-invert $color-invert !important;
              }
            }
          }

          &[disabled],
          fieldset[disabled] & {
            background-color: transparent;
            border-color: $color;
            box-shadow: none;
            color: $color;
          }
        }

        &.is-inverted.is-outlined {
          background-color: transparent;
          border-color: $color-invert;
          color: $color-invert;

          &:hover,
          &.is-hovered,
          &:focus,
          &.is-focused {
            background-color: $color-invert;
            color: $color;
          }

          &.is-loading {
            &:hover,
            &.is-hovered,
            &:focus,
            &.is-focused {
              &::after {
                border-color: transparent transparent $color $color !important;
              }
            }
          }

          &[disabled],
          fieldset[disabled] & {
            background-color: transparent;
            border-color: $color-invert;
            box-shadow: none;
            color: $color-invert;
          }
        }

        // If light and dark colors are provided
        @if length($pair) >= 4 {
          $color-light: nth($pair, 3);
          $color-dark: nth($pair, 4);
          &.is-light {
            background-color: $color-light;
            color: $color-dark;

            &:hover,
            &.is-hovered {
              background-color: bulmaDarken($color-light, 2.5%);
              border-color: transparent;
              color: $color-dark;
            }

            &:active,
            &.is-active {
              background-color: bulmaDarken($color-light, 5%);
              border-color: transparent;
              color: $color-dark;
            }
          }
        }
      }
    }
    // Sizes
    &.is-small {
      @include button-small;
    }

    &.is-normal {
      @include button-normal;
    }

    // Modifiers
    &[disabled] {
      background-color: $button-disabled-background-color;
      border-color: $button-disabled-border-color;
      box-shadow: $button-disabled-shadow;
      opacity: $button-disabled-opacity;
    }

    &.is-fullwidth {
      display: flex;
      width: 100%;
    }

    &.is-loading {
      color: transparent !important;
      pointer-events: none;

      &::after {
        @include loader;
        @include center(1em);

        position: absolute !important;
      }
    }

    &.is-static {
      background-color: $button-static-background-color;
      border-color: $button-static-border-color;
      color: $button-static-color;
      box-shadow: none;
      pointer-events: none;
    }

    &.is-rounded {
      border-radius: $radius-rounded;
      padding-left: calc(#{$button-padding-horizontal} + 0.25em);
      padding-right: calc(#{$button-padding-horizontal} + 0.25em);
    }
  }
}
